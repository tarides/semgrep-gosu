(* Generated by ocaml-tree-sitter. *)
(*
   gosu grammar

   entrypoint: start
*)

open! Sexplib.Conv
open Tree_sitter_run

type pat_dc28280 = Token.t (* pattern "[^'\\\\]+" *)

type id = Token.t

type pat_3a2a380 = Token.t (* pattern "[^\"\\\\]+" *)

type modifiers =
  [
      `Priv of Token.t (* "private" *)
    | `Inte of Token.t (* "internal" *)
    | `Prot of Token.t (* "protected" *)
    | `Public of Token.t (* "public" *)
    | `Static of Token.t (* "static" *)
    | `Abst of Token.t (* "abstract" *)
    | `Over of Token.t (* "override" *)
    | `Final of Token.t (* "final" *)
    | `Tran of Token.t (* "transient" *)
  ]
    list (* one or more *)

type stringliteral = [
    `SQUOT_pat_dc28280_SQUOT of (
        Token.t (* "'" *) * pat_dc28280 * Token.t (* "'" *)
    )
  | `DQUOT_pat_3a2a380_DQUOT of (
        Token.t (* "\"" *) * pat_3a2a380 * Token.t (* "\"" *)
    )
]

type type_ = [ `Type_id of id (*tok*) ]

type expression = [ `Stri of stringliteral ]

type fielddefn = (
    Token.t (* "var" *)
  * id (*tok*)
  * (Token.t (* ":" *) * type_) option
  * (Token.t (* "as" *) * Token.t (* "readonly" *) option * id (*tok*))
      option
  * (Token.t (* "=" *) * expression) option
)

type declaration = (
    modifiers option
  * [ `Fiel of fielddefn ]
  * Token.t (* ";" *) option
)

type classmembers = declaration list (* one or more *)

type classbody = (
    Token.t (* "{" *)
  * classmembers option
  * Token.t (* "}" *)
)

type gclass = (Token.t (* "class" *) * id (*tok*) * classbody)

type start = (modifiers option * [ `Gclass of gclass ])

type digit (* inlined *) = Token.t (* pattern [0-9] *)

type line_comment (* inlined *) = Token.t (* pattern \/\/[^\n\r]* *)

type comment (* inlined *) = Token.t (* pattern \/\*([^\*]|(\*[^\/]))*\*\/ *)

type type_identifier (* inlined *) = id (*tok*)

type extra = [
    `Comment of Loc.t * comment
  | `Line_comment of Loc.t * line_comment
]

type extras = extra list
